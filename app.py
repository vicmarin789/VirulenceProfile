import streamlit as st
import pandas as pd
import requests

# ---------------------------
# Fun√ß√£o para atualizar a base de virul√™ncia
# ---------------------------
def atualizar_base_virulencia():
    organismos = [
        ("Salmonella enterica", 99287, "neg"),
        ("Escherichia coli", 562, "neg"),
        ("Staphylococcus aureus", 1280, "pos"),
        ("Listeria monocytogenes", 1639, "pos"),
        ("Pseudomonas aeruginosa", 287, "neg"),
        ("Shigella flexneri", 623, "neg"),
        ("Klebsiella pneumoniae", 573, "neg"),
        ("Vibrio cholerae", 666, "neg"),
        ("Campylobacter jejuni", 197, "neg")
    ]

    genes = []
    for org_name, org_id, gram in organismos:
        query = f"(organism_id:{org_id}) AND (keyword:KW-0800)"
        url = f"https://rest.uniprot.org/uniprotkb/search?query={query}&format=tsv&fields=accession,gene_names,organism_name"
        r = requests.get(url)
        if r.status_code != 200:
            continue
        lines = r.text.strip().split("\n")[1:]
        for line in lines:
            parts = line.split("\t")
            gene_name = parts[1].split(" ")[0] if parts[1] else "desconhecido"
            genes.append({
                "gene": gene_name,
                "categoria": "desconhecida",
                "gram": gram,
                "peso": 3,
                "evidencia": True
            })

    df = pd.DataFrame(genes).drop_duplicates(subset="gene")
    df.to_csv("base_virulencia.csv", index=False)
    return len(df)

# ---------------------------
# Carrega base externa de genes virulentos
# ---------------------------
@st.cache_data
def carregar_base_virulencia():
    return pd.read_csv("base_virulencia.csv")

# ---------------------------
# Fun√ß√£o de classifica√ß√£o refinada
# ---------------------------
def classificar(df, gram="neg", base=None):
    pontuacao = 0
    detalhes = []

    for _, fator in df.iterrows():
        gene = fator["gene"]
        identidade = fator["identidade"]
        cobertura = fator["cobertura"]

        info = base.query(f"(gene == @gene) and (gram == @gram or gram == 'ambos')")
        if not info.empty:
            linha = info.iloc[0]
            if identidade >= 85 and cobertura >= 95:
                peso = linha["peso"]
                if linha["evidencia"]:
                    peso *= 1.5
                pontuacao += peso
                detalhes.append((gene, linha["categoria"], round(peso, 2)))
            else:
                detalhes.append((gene, linha["categoria"], 0))
        else:
            detalhes.append((gene, "n√£o classificado", 0))

    if pontuacao >= 20:
        resultado = "Alta probabilidade de patogenicidade"
    elif pontuacao >= 10:
        resultado = "Potencial patog√™nico moderado"
    else:
        resultado = "Baixa probabilidade de ser patog√™nico"

    return pontuacao, resultado, detalhes

# ---------------------------
# Interface Streamlit
# ---------------------------
st.set_page_config(page_title="Analisador de Patogenicidade Bacteriana", page_icon="üß¨")
st.title("üß¨ Analisador de Patogenicidade Bacteriana")
st.write("Fa√ßa upload de um arquivo CSV com os genes identificados e selecione o tipo de bact√©ria.")

# Bot√£o para atualizar a base
if st.button("üîÑ Atualizar base de virul√™ncia"):
    total = atualizar_base_virulencia()
    st.success(f"Base atualizada com {total} genes virulentos.")

# Bot√£o para baixar modelo de entrada
modelo_csv = "gene,identidade,cobertura\ninvA,98.5,100\nfimH,92.3,97\nstn,88.0,95\n"
st.download_button("üì• Baixar modelo de entrada (.csv)", modelo_csv, file_name="exemplo_entrada.csv")

# Carrega a base atualizada
base_virulencia = carregar_base_virulencia()

uploaded_file = st.file_uploader("Carregar arquivo CSV", type=["csv"])
gram = st.radio("Tipo de bact√©ria:", ("Gram-negativa", "Gram-positiva"))
gram = "neg" if gram == "Gram-negativa" else "pos"

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    df.columns = df.columns.str.strip().str.lower()

    mapeamento = {}
    for col in {"gene", "identidade", "cobertura"}:
        for existente in df.columns:
            if col in existente:
                mapeamento[existente] = col
    df = df.rename(columns=mapeamento)

    st.subheader("Pr√©-visualiza√ß√£o dos dados")
    st.dataframe(df)

    if st.button("Classificar"):
        if not {"gene", "identidade", "cobertura"}.issubset(df.columns):
            st.error("O arquivo CSV deve conter as colunas: 'gene', 'identidade' e 'cobertura'.")
        else:
            pontuacao, resultado, detalhes = classificar(df, gram, base_virulencia)

            st.subheader("Resultado da an√°lise")
            st.write(f"**Pontua√ß√£o total ajustada:** {round(pontuacao, 2)}")
            st.write(f"**Classifica√ß√£o:** {resultado}")

            st.subheader("Detalhes por gene")
            detalhes_df = pd.DataFrame(detalhes, columns=["Gene", "Categoria", "Pontua√ß√£o"])
            st.dataframe(detalhes_df)

            # Visualiza√ß√£o por categoria funcional
            st.subheader("Distribui√ß√£o por categoria funcional")
            categoria_df = detalhes_df.groupby("Categoria").agg({
                "Pontua√ß√£o": ["count", "sum"]
            }).reset_index()
            categoria_df.columns = ["Categoria", "N√∫mero de genes", "Pontua√ß√£o total"]
            st.dataframe(categoria_df)
            st.bar_chart(categoria_df.set_index("Categoria")["N√∫mero de genes"])